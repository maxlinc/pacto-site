---
layout: 'page'
title: Cheat Sheet
---
<div id="docco">
  <div id="container">
      <div id="background"></div>
      
      <ul class="sections">
          
            <li id="title">
                <div class="annotation">
                    <h1>samples.rb</h1>
                </div>
            </li>
          
          
          
          <li id="section-1">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-1">&#182;</a>
                </div>
                <p>Just require pacto to add it to your project.</p>

              </div>
              
              <div class="content"><div class='highlight'><pre><span class="hljs-keyword">require</span> <span class="hljs-string">'pacto'</span></pre></div></div>
              
          </li>
          
          
          <li id="section-2">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-2">&#182;</a>
                </div>
                <p>Pacto will disable live connections, so you will get an error if
  your code unexpectedly calls an service that was not stubbed.  If you
  want to re-enable connections, run <code>WebMock.allow_net_connect!</code></p>

              </div>
              
              <div class="content"><div class='highlight'><pre><span class="hljs-constant">WebMock</span>.allow_net_connect!</pre></div></div>
              
          </li>
          
          
          <li id="section-3">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-3">&#182;</a>
                </div>
                <p>We can be configured via a block.
  See the <a href="https://www.relishapp.com/maxlinc/pacto/v/0-3-0/docs/configuration">Configuration documentation</a>
  for more options.</p>

              </div>
              
              <div class="content"><div class='highlight'><pre><span class="hljs-constant">Pacto</span>.configure <span class="hljs-keyword">do</span> |c|
    c.contracts_path = <span class="hljs-string">'contracts'</span>
  <span class="hljs-keyword">end</span></pre></div></div>
              
          </li>
          
          
          <li id="section-4">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-4">&#182;</a>
                </div>
                <p>Calling <code>Pacto.generate!</code> enables <a href="https://www.relishapp.com/maxlinc/pacto/v/0-3-0/docs/generate">contract generation</a>.</p>

              </div>
              
              <div class="content"><div class='highlight'><pre><span class="hljs-constant">Pacto</span>.generate!</pre></div></div>
              
          </li>
          
          
          <li id="section-5">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-5">&#182;</a>
                </div>
                <p>Now, if we run any code that makes an HTTP call (using an
  <a href="https://github.com/bblimke/webmock#supported-http-libraries">HTTP library supported by WebMock</a>)
  then Pacto will generate a Contract based on the HTTP request/response.</p>
  <p>This code snippet will generate a Contract and save it two <code>contracts/api.github.com/repos/thoughtworks/pacto/readme.json</code>.</p>

              </div>
              
              <div class="content"><div class='highlight'><pre><span class="hljs-keyword">require</span> <span class="hljs-string">'octokit'</span>
  readme = <span class="hljs-constant">Octokit</span>.readme <span class="hljs-string">'thoughtworks/pacto'</span></pre></div></div>
              
          </li>
          
          
          <li id="section-6">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-6">&#182;</a>
                </div>
                <p>We&#39;re getting back real data from GitHub, so this should be the actual file encoding.</p>

              </div>
              
              <div class="content"><div class='highlight'><pre>puts readme.encoding</pre></div></div>
              
          </li>
          
          
          <li id="section-7">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-7">&#182;</a>
                </div>
                <p>The generated contract will contain expectations based on the request/response we observed,
  including a best-guess at an appropriate json-schema.  Our heuristics certainly aren&#39;t foolproof,
  so you might want to modify the output!</p>
  <p>We can load the contract and validate it, by sending a new request and making sure
  the response matches the JSON schema.  Obviously it will pass since we just recorded it,
  but if the service has made a change, or if you alter the contract with new expectations,
  then you will see a contract validation message.</p>

              </div>
              
              <div class="content"><div class='highlight'><pre>contracts = <span class="hljs-constant">Pacto</span>.build_contracts(<span class="hljs-string">'contracts'</span>, <span class="hljs-string">'https://api.github.com'</span>)
  contracts.validate_all</pre></div></div>
              
          </li>
          
          
          <li id="section-8">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-8">&#182;</a>
                </div>
                <p>We can also use Pacto to stub the service based on the contract.</p>

              </div>
              
              <div class="content"><div class='highlight'><pre>contracts.stub_all</pre></div></div>
              
          </li>
          
          
          <li id="section-9">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-9">&#182;</a>
                </div>
                <p>The stubbed data won&#39;t be very realistic, the default behavior is to return the simplest data
  that complies with the schema.  That basically means that you&#39;ll have &quot;bar&quot; for every string.</p>

              </div>
              
              <div class="content"><div class='highlight'><pre>readme = <span class="hljs-constant">Octokit</span>.readme <span class="hljs-string">'thoughtworks/pacto'</span></pre></div></div>
              
          </li>
          
          
          <li id="section-10">
              <div class="annotation">
                
                <div class="pilwrap ">
                  <a class="pilcrow" href="#section-10">&#182;</a>
                </div>
                <p>You&#39;re now getting stubbed data.  Unless you generated the schema with the <code>defaults</code> option enabled,
  then this will just return &quot;bar&quot; as the encoding.  If you recorded the defaults, then it will return
  the value received when the Contract was generated.</p>

              </div>
              
              <div class="content"><div class='highlight'><pre>puts readme.type</pre></div></div>
              
          </li>
          
      </ul>
    </div>
  </div>